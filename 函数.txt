def 函数名(位置形参，默认形参，任意位置形参，*,命名关键字形参，任意关键字形参):
	位置形参的顺序不能变
	关键字形参的顺序可以动
	函数可以返回任何类型的值，包括列表、字典、函数

def 函数名(*arg)
def 函数名(**kw)
def 函数名(位置形参,*,关键字形参)

在函数内部，可以调用其他函数。如果一个函数在内部调用自身本身，这个函数就是递归函数。
def fact(n):
    if n==1:
        return 1
    return n * fact(n - 1)

通过列表生成式，我们可以直接创建一个列表。但是，受到内存限制，列表容量肯定是有限的。而且，创建一个包含100万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。
L = [x * x for x in range(10)]
要创建一个generator生成器，有很多种方法。第一种方法很简单，只要把一个列表生成式的[]改成()，就创建了一个generator
g = (x * x for x in range(10))

高阶函数
map()函数接收两个参数，一个是函数，一个是Iterable可迭代对象，map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回。
 def f(x):
    return x * x
r = map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])
reduce把一个函数作用在一个序列[x1, x2, x3, ...]上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算
reduce(add, [1, 3, 5, 7, 9])
25
filter()也接收一个函数和一个序列。和map()不同的是，filter()把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素

关键字lambda表示匿名函数，冒号前面的x表示函数参数。
匿名函数有个限制，就是只能有一个表达式，不用写return，返回值就是该表达式的结果。
list(map(lambda x: x * x, [1, 2, 3, 4, 5, 6, 7, 8, 9]))

装饰器（Decorator）本质上，decorator就是一个返回函数的高阶函数。

偏函数functools.partial
functools.partial的作用就是，把一个函数的某些参数给固定住（也就是设置默认值），返回一个新的函数，调用这个新函数会更简单。
int2 = functools.partial(int, base=2)